<% /* 定义参数 */ %>
<%
    const { utils, route, config, apiConfig } = it;
    const routeDocs = includeFile("@base/route-docs", { config, route, utils });
    const { HTTP_CLIENT, RESERVED_REQ_PARAMS_ARG_NAMES } = config.constants;
    const { _, getInlineParseContent, getParseContent, parseSchema, getComponentByRef, require } = utils;
    const { requestBodyInfo, responseBodyInfo, specificArgNameResolver } = route;
    const { parameters, path, method, payload, query, formData, security, requestParams } = route.request;
    const { type, errorType, contentTypes } = route.response;
    const pathParams = _.values(parameters);
    const pathParamsNames = _.map(pathParams, "name");
    const argToTmpl = ({ name, optional, type, defaultValue }) => `${name}${!defaultValue && optional ? '?' : ''}: ${type}${defaultValue ? ` = ${defaultValue}` : ''}`;
    const bodyTmpl = _.get(payload, "name") || null;
    const queryName = (query && query.name) || "query";
    const queryTmpl = (query != null && queryName) || null;

    // 前缀
    let basePath = apiConfig.basePath || config.originalSchema.basePath;
    basePath = basePath === '/' ? '' : basePath;

    /** 是否使用假domain */
    const fakeDomain = !!apiConfig.fakeDomain;

    const requestConfigParam = {
        name: "options",
        optional: true,
        type: "IAjaxOptions",
        defaultValue: "{}",
    }
    const rawWrapperArgs = config.extractRequestParams ?
        _.compact([
            requestParams && {
            name: pathParams.length ? `{ ${_.join(pathParamsNames, ", ")}, ...${queryName} }` : queryName,
            optional: false,
            type: getInlineParseContent(requestParams),
            },
            ...(!requestParams ? pathParams : []),
            payload,
            requestConfigParam,
        ]) :
        _.compact([
            ...pathParams,
            query,
            payload,
            requestConfigParam,
        ])

    const wrapperArgs = _
        // Sort by optionality
        .sortBy(rawWrapperArgs, [o => o.optional])
        .map(argToTmpl)
        .join(', ');

    let methodApi = 'apiGet';

    switch (_.upperCase(method)) {
        case 'POST':
            methodApi = 'apiPost';
            break;
        case 'DELETE':
            methodApi = 'apiDel';
            break;
        case 'PUT':
            methodApi = 'apiPut';
            break;
    }

%>

<% /* 写注释 */ %>
/**
<%~ routeDocs.description %>

* <% /* Here you can add some other JSDoc tags */ %>

<%~ routeDocs.lines %>

*/
<% /* 输出接口 */ %>
export const <%~ route.routeName.usage %> = (<%~ wrapperArgs %>) => {
    <% /* <% if (_.upperCase(method) === 'GET') { %>'apiGet'<% } %> */ %>
    return <%~ methodApi %><<%~ type %>>(
        `${basePath}<%~ path %>`,
        <%~ bodyTmpl ? bodyTmpl : (queryTmpl ? queryTmpl : '{}') %>,
        <%~ fakeDomain ? "{targetDomain: 'fakeDomain'}" : _.get(requestConfigParam, "name") %>
    );
};
